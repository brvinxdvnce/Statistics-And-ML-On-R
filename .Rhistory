if (length(clean) > 1) {  # иначе density() может упасть
hist(clean, main = paste("Гистограмма", var), xlab = var, col = "skyblue", probability = TRUE)
lines(density(clean, na.rm = TRUE), col = "blue", lwd = 2)
}
}
remove_highly_correlated <- function(df, threshold = 0.9) {
cor_matrix <- cor(df)
to_remove <- c()
for (i in 1:(ncol(cor_matrix)-1)) {
for (j in (i+1):ncol(cor_matrix)) {
if (abs(cor_matrix[i, j]) > threshold) {
to_remove <- c(to_remove, colnames(df)[j])
}
}
}
return(df[, !(colnames(df) %in% unique(to_remove)), drop = FALSE])
}
Y_filtered <- remove_highly_correlated(Y)
remove_outliers <- function(v) {
q <- quantile(v, c(0.25, 0.75))
iqr <- q[2] - q[1]
bounds <- c(q[1] - 1.5*iqr, q[2] + 1.5*iqr)
return(v[v >= bounds[1] & v <= bounds[2]])
}
X_clean <- remove_outliers(X)
Y_clean <- lapply(Y_filtered, remove_outliers)
plot_distribution <- function(v, name) {
hist(v, main = paste("Histogram of", name), col = "lightblue")
lines(density(v), col = "red", lwd = 2)
}
plot_distribution(X_clean, X_name)
Y <- data[Y_names]
View(data)
X_name <- colnames(data)[ncol(data)]
Y_names <- colnames(data)[-ncol(data)]
X <- data[[X_name]]
Y <- data[Y_names]
remove_highly_correlated <- function(df, threshold = 0.9) {
cor_matrix <- cor(df)
to_remove <- c()
for (i in 1:(ncol(cor_matrix)-1)) {
for (j in (i+1):ncol(cor_matrix)) {
if (abs(cor_matrix[i, j]) > threshold) {
to_remove <- c(to_remove, colnames(df)[j])
}
}
}
return(df[, !(colnames(df) %in% unique(to_remove)), drop = FALSE])
}
Y_filtered <- remove_highly_correlated(Y)
remove_outliers <- function(v) {
q <- quantile(v, c(0.25, 0.75))
iqr <- q[2] - q[1]
bounds <- c(q[1] - 1.5*iqr, q[2] + 1.5*iqr)
return(v[v >= bounds[1] & v <= bounds[2]])
}
remove_outliers <- function(v) {
q <- quantile(v, c(0.25, 0.75))
iqr <- q[2] - q[1]
bounds <- c(q[1] - 1.5*iqr, q[2] + 1.5*iqr)
return(v[v >= bounds[1] & v <= bounds[2]])
}
remove_outliers <- function(v) {
q <- quantile(v, c(0.25, 0.75))
iqr <- q[2] - q[1]
bounds <- c(q[1] - 1.5*iqr, q[2] + 1.5*iqr)
return(v[v >= bounds[1] & v <= bounds[2]])
}
remove_outliers <- function(v) {
q <- quantile(v, c(0.25, 0.75))
iqr <- q[2] - q[1]
bounds <- c(q[1] - 1.5*iqr, q[2] + 1.5*iqr)
return(v[v >= bounds[1] & v <= bounds[2]])
}
X_clean <- remove_outliers(X)
Y_clean <- lapply(Y_filtered, remove_outliers)
plot_distribution <- function(v, name) {
hist(v, main = paste("Histogram of", name), col = "lightblue")
lines(density(v), col = "red", lwd = 2)
}
plot_distribution(X_clean, X_name)
plot_distribution <- function(v, name) {
hist(v, main = paste("Histogram of", name), col = "lightblue")
lines(density(v), col = "red", lwd = 2)
}
# Часть 1
print("start program")
data <- read.csv("C:/Users/danil/Desktop/datasets/data/5. programming-language-database/pldb.csv")
X_name <- colnames(data)[ncol(data)]
Y_names <- colnames(data)[-ncol(data)]
X <- data[[X_name]]
Y <- data[Y_names]
remove_highly_correlated <- function(df, threshold = 0.9) {
cor_matrix <- cor(df)
to_remove <- c()
for (i in 1:(ncol(cor_matrix)-1)) {
for (j in (i+1):ncol(cor_matrix)) {
if (abs(cor_matrix[i, j]) > threshold) {
to_remove <- c(to_remove, colnames(df)[j])
}
}
}
return(df[, !(colnames(df) %in% unique(to_remove)), drop = FALSE])
}
Y_filtered <- remove_highly_correlated(Y)
remove_outliers <- function(v) {
q <- quantile(v, c(0.25, 0.75))
iqr <- q[2] - q[1]
bounds <- c(q[1] - 1.5*iqr, q[2] + 1.5*iqr)
return(v[v >= bounds[1] & v <= bounds[2]])
}
X_clean <- remove_outliers(X)
Y_clean <- lapply(Y_filtered, remove_outliers)
plot_distribution <- function(v, name) {
hist(v, main = paste("Histogram of", name), col = "lightblue")
lines(density(v), col = "red", lwd = 2)
}
plot_distribution(X_clean, X_name)
for (i in seq_along(Y_clean)) {
plot_distribution(Y_clean[[i]], names(Y_clean)[i])
}
calculate_stats <- function(v) {
mean_val <- mean(v)
median_val <- median(v)
mode_val <- as.numeric(names(sort(table(v), decreasing = TRUE)[1]))
variance_val <- var(v)
sd_val <- sd(v)
return(c(mean = mean_val, median = median_val, mode = mode_val,
variance = variance_val, sd = sd_val))
}
X_stats <- calculate_stats(X_clean)
Y_stats <- sapply(Y_clean, calculate_stats)
# Часть 2
mu0 <- 0
alpha <- 0.05
n <- length(X_clean)
sample_mean <- mean(X_clean)
sample_sd <- sd(X_clean)
X_name <- colnames(data)[ncol(data)]
set.seed(42)
if (nrow(data) > 200) data <- data[sample(nrow(data), 200), ]
# Часть 1
print("start program")
data <- read.csv(
"C:/Users/danil/Desktop/datasets/data/5. programming-language-database/pldb.csv",
nrows = 200)
set.seed(42)
set.seed(42)
set.seed(42)
if (nrow(data) > 200) data <- data[sample(nrow(data), 200), ]
X <- data[, ncol(data)]
Yi <- data[-ncol(data)]
my_var <- function(x) {
x <- x[!is.na(x)]
n <- length(x)
if (n < 2) return(0)
sum((x - mean(x))^2) / (n-1)
}
my_sd <- function(x) sqrt(my_var(x))
my_mode <- function(x) {
x <- x[!is.na(x)]
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[which.max(tab)]
}
my_cor <- function(x, y) {
complete <- !is.na(x) & !is.na(y)
x <- x[complete]
y <- y[complete]
n <- length(x)
if (n < 2) return(0)
cov_xy <- sum((x - mean(x)) * (y - mean(y))) / (n-1)
cov_xy / (my_sd(x) * my_sd(y))
}
to_remove <- c()
features <- names(Yi)
for (i in 1:(length(features)-1)) {
for (j in (i+1):length(features)) {
if (abs(my_cor(Yi[[i]], Yi[[j]])) > 0.9) {
to_remove <- c(to_remove, j)
}
}
}
if (length(to_remove) > 0) Yi <- Yi[-unique(to_remove)]
is_outlier <- function(x) {
x <- x[!is.na(x)]
if (length(x) < 4) return(rep(FALSE, length(x)))
q <- quantile(x, c(0.25, 0.75))
iqr <- q[2] - q[1]
lb <- q[1] - 1.5 * iqr
ub <- q[2] + 1.5 * iqr
x < lb | x > ub
}
plot_dist <- function(x, name) {
clean_x <- x[!is_outlier(x) & !is.na(x)]
h <- hist(clean_x, plot = FALSE)
plot(h, main = name, col = "lightblue", xlab = "Values", ylab = "Frequency")
lines(h$mids, h$counts, type = "o", col = "red")
}
plot_dist(X, "Target X")
for (name in names(Yi)) plot_dist(Yi[[name]], name)
stats <- function(x) {
c(mean(x, na.rm = TRUE),
median(x, na.rm = TRUE),
my_mode(x),
my_var(x),
my_sd(x))
}
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
load("~/laba1/.RData")
Mean = c(stats_X[1], sapply(stats_Yi, "[", 1)),
Mean = c(stats_X[1], sapply(stats_Yi, "[", 1)),
Yi <- data[-ncol(data)]
my_var <- function(x) {
x <- x[!is.na(x)]
n <- length(x)
if (n < 2) return(0)
sum((x - mean(x))^2) / (n-1)
}
my_sd <- function(x) sqrt(my_var(x))
my_mode <- function(x) {
x <- x[!is.na(x)]
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[which.max(tab)]
}
my_cor <- function(x, y) {
complete <- !is.na(x) & !is.na(y)
x <- x[complete]
y <- y[complete]
n <- length(x)
if (n < 2) return(0)
cov_xy <- sum((x - mean(x)) * (y - mean(y))) / (n-1)
cov_xy / (my_sd(x) * my_sd(y))
}
to_remove <- c()
features <- names(Yi)
for (i in 1:(length(features)-1)) {
for (j in (i+1):length(features)) {
if (abs(my_cor(Yi[[i]], Yi[[j]])) > 0.9) {
to_remove <- c(to_remove, j)
}
}
}
if (length(to_remove) > 0) Yi <- Yi[-unique(to_remove)]
is_outlier <- function(x) {
x <- x[!is.na(x)]
if (length(x) < 4) return(rep(FALSE, length(x)))
q <- quantile(x, c(0.25, 0.75))
iqr <- q[2] - q[1]
lb <- q[1] - 1.5 * iqr
ub <- q[2] + 1.5 * iqr
x < lb | x > ub
}
plot_dist <- function(x, name) {
clean_x <- x[!is_outlier(x) & !is.na(x)]
h <- hist(clean_x, plot = FALSE)
plot(h, main = name, col = "lightblue", xlab = "Values", ylab = "Frequency")
lines(h$mids, h$counts, type = "o", col = "red")
}
plot_dist(X, "Target X")
for (name in names(Yi)) plot_dist(Yi[[name]], name)
source("~/laba1/labamkn.R", echo = TRUE)
# Часть 1
print("start program")
data <- read.csv(
"C:/Users/danil/Desktop/datasets/data/5. programming-language-database/pldb.csv",
nrows = 200)
set.seed(42)
if (nrow(data) > 200) data <- data[sample(nrow(data), 200), ]
X <- data[, ncol(data)]
Yi <- data[-ncol(data)]
my_var <- function(x) {
x <- x[!is.na(x)]
n <- length(x)
if (n < 2) return(0)
sum((x - mean(x))^2) / (n-1)
}
my_sd <- function(x) sqrt(my_var(x))
my_mode <- function(x) {
x <- x[!is.na(x)]
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[which.max(tab)]
}
my_cor <- function(x, y) {
complete <- !is.na(x) & !is.na(y)
x <- x[complete]
y <- y[complete]
n <- length(x)
if (n < 2) return(0)
cov_xy <- sum((x - mean(x)) * (y - mean(y))) / (n-1)
cov_xy / (my_sd(x) * my_sd(y))
}
to_remove <- c()
features <- names(Yi)
for (i in 1:(length(features)-1)) {
for (j in (i+1):length(features)) {
if (abs(my_cor(Yi[[i]], Yi[[j]])) > 0.9) {
to_remove <- c(to_remove, j)
}
}
}
#ctrl a + ctrl Enter
# Часть 1
print("start program")
data <- read.csv(
"C:/Users/danil/Desktop/datasets/data/5. programming-language-database/pldb.csv",
nrows = 200)
set.seed(42)
if (nrow(data) > 200) data <- data[sample(nrow(data), 200), ]
X <- data[, ncol(data)]
Yi <- data[-ncol(data)]
my_var <- function(x) {
x <- x[!is.na(x)]
n <- length(x)
if (n < 2) return(0)
sum((x - mean(x))^2) / (n-1)
}
my_sd <- function(x) sqrt(my_var(x))
my_mode <- function(x) {
x <- x[!is.na(x)]
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[which.max(tab)]
}
my_cor <- function(x, y) {
complete <- !is.na(x) & !is.na(y)
x <- x[complete]
y <- y[complete]
n <- length(x)
if (n < 2) return(0)
cov_xy <- sum((x - mean(x)) * (y - mean(y))) / (n-1)
cov_xy / (my_sd(x) * my_sd(y))
}
to_remove <- c()
features <- names(Yi)
for (i in 1:(length(features)-1)) {
for (j in (i+1):length(features)) {
if (abs(my_cor(Yi[[i]], Yi[[j]])) > 0.9) {
to_remove <- c(to_remove, j)
}
}
}
source("~/laba1/labamkn.R", echo = TRUE)
source("~/laba1/labamkn.R")
#ctrl a + ctrl Enter
# Часть 1
print("start program")
data <- read.csv(
"C:/Users/danil/Desktop/datasets/data/5. programming-language-database/pldb.csv",
nrows = 200)
set.seed(42)
if (nrow(data) > 200) data <- data[sample(nrow(data), 200), ]
X <- data[, ncol(data)]
Yi <- data[-ncol(data)]
my_var <- function(x) {
x <- x[!is.na(x)]
n <- length(x)
if (n < 2) return(0)
sum((x - mean(x))^2) / (n-1)
}
my_sd <- function(x) sqrt(my_var(x))
my_mode <- function(x) {
x <- x[!is.na(x)]
ux <- unique(x)
tab <- tabulate(match(x, ux))
ux[which.max(tab)]
}
my_cor <- function(x, y) {
complete <- !is.na(x) & !is.na(y)
x <- x[complete]
y <- y[complete]
n <- length(x)
if (n < 2) return(0)
cov_xy <- sum((x - mean(x)) * (y - mean(y))) / (n-1)
cov_xy / (my_sd(x) * my_sd(y))
}
to_remove <- c()
features <- names(Yi)
for (i in 1:(length(features)-1)) {
for (j in (i+1):length(features)) {
if (abs(my_cor(Yi[[i]], Yi[[j]])) > 0.9) {
to_remove <- c(to_remove, j)
}
}
}
source("~/laba1/labamkn.R")
# Часть 1
print("start program")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
install.packages("ggplot2")
source("~/laba1/labamkn.R")
install.packages("farver")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
install.packages("corrplot")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
install.packages("ggcorrplot")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/functions.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn2.R")
source("~/laba1/functions.R")
source("~/laba1/labamkn.R")
source("~/laba1/functions.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn.R")
source("~/laba1/labamkn2.R")
source("~/laba1/labamkn2.R")
